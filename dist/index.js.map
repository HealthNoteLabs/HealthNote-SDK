{"version":3,"sources":["../src/charts/svg.ts","../src/index.ts","../src/loaders/jsonLoader.ts","../src/loaders/csvLoader.ts","../src/transforms/timeSeries.ts","../src/transforms/groupByBucket.ts","../src/validator/validateEvent.ts","../src/analytics/stats.ts","../src/analytics/rolling.ts","../src/secure/renderWorker.ts","../src/react/LineChart.tsx","../src/react/BarChart.tsx"],"sourcesContent":["import { TimeSeriesPoint } from '../types.js';\r\n\r\nexport interface ChartOptions {\r\n  width?: number; // px\r\n  height?: number; // px\r\n  stroke?: string; // CSS color for line/bar\r\n  fill?: string; // bar fill or line area fill\r\n}\r\n\r\nconst DEFAULT_OPTS: Required<ChartOptions> = {\r\n  width: 320,\r\n  height: 180,\r\n  stroke: '#007aff',\r\n  fill: 'none',\r\n};\r\n\r\nfunction sanitizeSeries(series: TimeSeriesPoint[]): TimeSeriesPoint[] {\r\n  return series.filter((p) => Number.isFinite(p.value));\r\n}\r\n\r\nexport function lineChartSVG(series: TimeSeriesPoint[], opts: ChartOptions = {}): string {\r\n  const options: Required<ChartOptions> = { ...DEFAULT_OPTS, ...opts } as any;\r\n  const data = sanitizeSeries(series);\r\n  if (!data.length) return '<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>';\r\n  const { width, height, stroke } = options;\r\n\r\n  // Compute scales\r\n  const minVal = Math.min(...data.map((d) => d.value));\r\n  const maxVal = Math.max(...data.map((d) => d.value));\r\n  const yScale = (v: number) => {\r\n    if (maxVal === minVal) return height / 2;\r\n    return height - ((v - minVal) / (maxVal - minVal)) * (height - 20) - 10; // padding 10px\r\n  };\r\n  const xScale = (i: number) => {\r\n    return (i / (data.length - 1)) * (width - 20) + 10; // padding\r\n  };\r\n\r\n  // Build path\r\n  let path = '';\r\n  data.forEach((d, i) => {\r\n    const x = xScale(i);\r\n    const y = yScale(d.value);\r\n    path += i === 0 ? `M${x},${y}` : ` L${x},${y}`;\r\n  });\r\n\r\n  return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\">\r\n    <path d=\"${path}\" fill=\"none\" stroke=\"${stroke}\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n  </svg>`;\r\n}\r\n\r\nexport function barChartSVG(series: TimeSeriesPoint[], opts: ChartOptions = {}): string {\r\n  const options: Required<ChartOptions> = { ...DEFAULT_OPTS, ...opts } as any;\r\n  const data = sanitizeSeries(series);\r\n  if (!data.length) return '<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>';\r\n  const { width, height, fill } = options;\r\n  const barWidth = Math.max(2, Math.floor((width - 20) / data.length));\r\n\r\n  const minVal = 0; // bars start at 0 baseline\r\n  const maxVal = Math.max(...data.map((d) => d.value));\r\n  const yScale = (v: number) => (maxVal === 0 ? 0 : ((v - minVal) / (maxVal - minVal)) * (height - 20));\r\n\r\n  let rects = '';\r\n  data.forEach((d, i) => {\r\n    const x = 10 + i * barWidth + 2; // 2px gap\r\n    const barH = yScale(d.value);\r\n    const y = height - barH - 10; // padding bottom 10\r\n    rects += `<rect x=\"${x}\" y=\"${y}\" width=\"${barWidth - 4}\" height=\"${barH}\" fill=\"${fill !== 'none' ? fill : '#007aff'}\" />`;\r\n  });\r\n\r\n  return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\">\r\n    ${rects}\r\n  </svg>`;\r\n} ","export { loadEventsFromFile } from './loaders/jsonLoader.js';\r\nexport { loadEventsFromCSV } from './loaders/csvLoader.js';\r\nexport { toTimeSeries } from './transforms/timeSeries.js';\r\nexport { groupByBucket } from './transforms/groupByBucket.js';\r\nexport { validateEvent } from './validator/validateEvent.js';\r\nexport { NostrEvent, TimeSeriesPoint } from './types.js';\r\nexport { mean, std, pearsonR, movingAverage, linearRegression, RegressionResult } from './analytics/stats.js';\r\nexport { rollingStatistic, rollingZScoreAnomalies, RollingStat, Anomaly } from './analytics/rolling.js';\r\nexport { lineChartSVG, barChartSVG, ChartOptions } from './charts/svg.js';\r\nexport { renderLineChartSecure, renderBarChartSecure } from './secure/renderWorker.js';\r\nexport { LineChart } from './react/LineChart.js';\r\nexport { BarChart } from './react/BarChart.js';\r\n\r\nexport const version = '0.0.1'; ","// @ts-ignore\r\nimport { readFile } from 'node:fs/promises';\r\nimport { NostrEvent } from '../types.js';\r\n\r\n/**\r\n * Load NIP-101h events from a JSON file. The file can contain:\r\n *   • A single Nostr event object\r\n *   • An array of events\r\n *   • Newline-delimited JSON (each line one event)\r\n */\r\nexport async function loadEventsFromFile(path: string): Promise<NostrEvent[]> {\r\n  const data = await readFile(path, 'utf8');\r\n  const trimmed = data.trim();\r\n  if (!trimmed) return [];\r\n\r\n  // First try to parse as whole JSON (object or array)\r\n  try {\r\n    const parsed = JSON.parse(trimmed);\r\n    if (Array.isArray(parsed)) return parsed as NostrEvent[];\r\n    return [parsed as NostrEvent];\r\n  } catch {\r\n    // Fallback: newline-delimited JSON\r\n    return trimmed\r\n      .split(/\\r?\\n/)\r\n      .filter(Boolean)\r\n      .map((line: string) => JSON.parse(line) as NostrEvent);\r\n  }\r\n} ","// @ts-ignore\r\nimport { readFile } from 'node:fs/promises';\r\n// @ts-ignore – csv-parse types may not be present\r\nimport { parse } from 'csv-parse/sync';\r\nimport { NostrEvent } from '../types.js';\r\n\r\nexport interface CSVLoaderOptions {\r\n  delimiter?: string;\r\n}\r\n\r\n/**\r\n * Load events from a CSV file that follows the column convention:\r\n * id,kind,created_at,timestamp,unit,value,encrypted\r\n */\r\nexport async function loadEventsFromCSV(\r\n  path: string,\r\n  opts: CSVLoaderOptions = {}\r\n): Promise<NostrEvent[]> {\r\n  const input = await readFile(path, 'utf8');\r\n  const records = parse(input, {\r\n    columns: true,\r\n    skip_empty_lines: true,\r\n    delimiter: opts.delimiter ?? ',',\r\n  });\r\n\r\n  const events: NostrEvent[] = records.map((row: any) => {\r\n    const tags: Array<[string, ...string[]]> = [];\r\n    if (row.unit) tags.push(['unit', row.unit]);\r\n    if (row.timestamp) tags.push(['timestamp', row.timestamp]);\r\n    if (row.encrypted === 'true' || row.encrypted === true) {\r\n      tags.push(['encryption_algo', 'nip44']);\r\n    }\r\n\r\n    return {\r\n      id: row.id,\r\n      kind: Number(row.kind),\r\n      content: String(row.value),\r\n      tags,\r\n      created_at: Number(row.created_at),\r\n    };\r\n  });\r\n\r\n  return events;\r\n} ","import { NostrEvent, TimeSeriesPoint } from '../types.js';\r\n\r\nexport interface TimeSeriesOptions {\r\n  metricKind?: number; // default 1351 (weight)\r\n}\r\n\r\n/**\r\n * Convert NIP-101h events into tidy time-series (long) format.\r\n * Currently supports **weight** (kind 1351) only.\r\n */\r\nexport function toTimeSeries(\r\n  events: NostrEvent[],\r\n  options: TimeSeriesOptions = {}\r\n): TimeSeriesPoint[] {\r\n  const { metricKind = 1351 } = options;\r\n\r\n  // Filter events for the metric\r\n  const filtered = events.filter((e) => e.kind === metricKind);\r\n\r\n  return filtered.map<TimeSeriesPoint>((ev) => {\r\n    const tags = ev.tags ?? [];\r\n\r\n    // Try to find explicit timestamp tag (ISO date string)\r\n    const timestampTag = tags.find((t) => t[0] === 'timestamp');\r\n    const iso = timestampTag ? timestampTag[1] : new Date(ev.created_at * 1000).toISOString();\r\n    const date = iso.slice(0, 10); // YYYY-MM-DD\r\n\r\n    const encrypted = !!tags.find((t) => t[0] === 'encryption_algo');\r\n    const valueNum = Number(ev.content);\r\n\r\n    return {\r\n      date,\r\n      value: isNaN(valueNum) ? 0 : valueNum,\r\n      source: timestampTag ? 'timestamp_tag' : 'created_at',\r\n      encrypted,\r\n    };\r\n  });\r\n} ","import { TimeSeriesPoint } from '../types.js';\r\n\r\nexport type Bucket = 'day' | 'week' | 'month';\r\nexport type Aggregate = 'avg' | 'sum' | 'min' | 'max' | 'count';\r\n\r\nexport interface GroupByBucketOptions {\r\n  bucket: Bucket;\r\n  aggregate: Aggregate;\r\n}\r\n\r\nexport interface BucketPoint extends TimeSeriesPoint {\r\n  count: number;\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nfunction bucketKey(dateIso: string, bucket: Bucket): string {\r\n  if (bucket === 'day') return dateIso;\r\n  const [year, month, day] = dateIso.split('-').map(Number);\r\n  if (bucket === 'week') {\r\n    const date = new Date(Date.UTC(year, month - 1, day));\r\n    const firstDay = new Date(date);\r\n    firstDay.setUTCDate(date.getUTCDate() - date.getUTCDay()); // Sunday start\r\n    return firstDay.toISOString().slice(0, 10);\r\n  }\r\n  // month\r\n  return `${year.toString().padStart(4, '0')}-${month.toString().padStart(2, '0')}`;\r\n}\r\n\r\nexport function groupByBucket(\r\n  series: TimeSeriesPoint[],\r\n  opts: GroupByBucketOptions\r\n): BucketPoint[] {\r\n  const { bucket, aggregate } = opts;\r\n  const map = new Map<string, BucketPoint>();\r\n\r\n  for (const p of series) {\r\n    const key = bucketKey(p.date, bucket);\r\n    let bucketPoint = map.get(key);\r\n    if (!bucketPoint) {\r\n      bucketPoint = {\r\n        date: key,\r\n        value: 0,\r\n        count: 0,\r\n        min: p.value,\r\n        max: p.value,\r\n        source: p.source,\r\n        encrypted: p.encrypted,\r\n      };\r\n      map.set(key, bucketPoint);\r\n    }\r\n    bucketPoint.count += 1;\r\n    bucketPoint.min = Math.min(bucketPoint.min, p.value);\r\n    bucketPoint.max = Math.max(bucketPoint.max, p.value);\r\n    bucketPoint.value += p.value; // temp sum\r\n  }\r\n\r\n  const out: BucketPoint[] = [];\r\n  map.forEach((bp) => {\r\n    switch (aggregate) {\r\n      case 'avg':\r\n        bp.value = bp.value / bp.count;\r\n        break;\r\n      case 'sum':\r\n        // value already sum\r\n        break;\r\n      case 'min':\r\n        bp.value = bp.min;\r\n        break;\r\n      case 'max':\r\n        bp.value = bp.max;\r\n        break;\r\n      case 'count':\r\n        bp.value = bp.count;\r\n        break;\r\n    }\r\n    out.push(bp);\r\n  });\r\n\r\n  // Sort by date ascending\r\n  return out.sort((a, b) => (a.date < b.date ? -1 : 1));\r\n} ","import Ajv, { ValidateFunction, ErrorObject } from 'ajv';\r\nimport path from 'path';\r\nimport { readFileSync, existsSync } from 'fs';\r\nimport { NostrEvent } from '../types.js';\r\n\r\nconst ajv = new Ajv({ allErrors: true });\r\nconst cache = new Map<number, ValidateFunction>();\r\n\r\nfunction loadSchemaForKind(kind: number): ValidateFunction | null {\r\n  if (cache.has(kind)) return cache.get(kind)!;\r\n  const schemaPath = path.resolve(process.cwd(), 'packages', 'analytics-sdk', 'schemas', `${kind}.schema.json`);\r\n  if (!existsSync(schemaPath)) {\r\n    cache.set(kind, null as any);\r\n    return null;\r\n  }\r\n  const raw = readFileSync(schemaPath, 'utf8');\r\n  const schemaJson = JSON.parse(raw);\r\n  const validate = ajv.compile(schemaJson);\r\n  cache.set(kind, validate);\r\n  return validate;\r\n}\r\n\r\nexport interface ValidationResult {\r\n  valid: boolean;\r\n  errors?: ErrorObject[] | null;\r\n}\r\n\r\nexport function validateEvent(ev: NostrEvent): ValidationResult {\r\n  const validate = loadSchemaForKind(ev.kind);\r\n  if (!validate) return { valid: true };\r\n  const ok = validate(ev);\r\n  return { valid: !!ok, errors: validate.errors };\r\n} ","import { TimeSeriesPoint } from '../types.js';\r\n\r\n/**\r\n * Compute the arithmetic mean of an array. Returns 0 for empty input.\r\n */\r\nexport function mean(values: number[]): number {\r\n  if (!values.length) return 0;\r\n  return values.reduce((sum, v) => sum + v, 0) / values.length;\r\n}\r\n\r\n/**\r\n * Compute the sample standard deviation. Returns 0 for <2 values.\r\n */\r\nexport function std(values: number[]): number {\r\n  if (values.length < 2) return 0;\r\n  const m = mean(values);\r\n  const variance = values.reduce((acc, v) => acc + (v - m) ** 2, 0) / (values.length - 1);\r\n  return Math.sqrt(variance);\r\n}\r\n\r\n/**\r\n * Align two time-series by date (ISO string) and return pairs of numeric values.\r\n * Non-matching dates are ignored.\r\n */\r\nfunction alignSeries(a: TimeSeriesPoint[], b: TimeSeriesPoint[]): Array<[number, number]> {\r\n  const mapA = new Map<string, number>();\r\n  for (const p of a) mapA.set(p.date, p.value);\r\n  const pairs: Array<[number, number]> = [];\r\n  for (const p of b) {\r\n    const vA = mapA.get(p.date);\r\n    if (vA !== undefined) pairs.push([vA, p.value]);\r\n  }\r\n  return pairs;\r\n}\r\n\r\n/**\r\n * Pearson correlation coefficient between two time-series.\r\n * Only overlapping dates are considered. Returns 0 if <2 overlap.\r\n */\r\nexport function pearsonR(a: TimeSeriesPoint[], b: TimeSeriesPoint[]): number {\r\n  const pairs = alignSeries(a, b);\r\n  if (pairs.length < 2) return 0;\r\n  const xs = pairs.map((p) => p[0]);\r\n  const ys = pairs.map((p) => p[1]);\r\n  const mx = mean(xs);\r\n  const my = mean(ys);\r\n  const sx = std(xs);\r\n  const sy = std(ys);\r\n  if (sx === 0 || sy === 0) return 0;\r\n  let num = 0;\r\n  for (let i = 0; i < pairs.length; i++) {\r\n    num += (xs[i] - mx) * (ys[i] - my);\r\n  }\r\n  return num / ((pairs.length - 1) * sx * sy);\r\n}\r\n\r\n/**\r\n * Simple moving average (SMA). Window size is number of samples.\r\n * Returns a new series (same length as input) with undefined values until enough samples.\r\n */\r\nexport function movingAverage(series: TimeSeriesPoint[], window: number): TimeSeriesPoint[] {\r\n  if (window <= 1) return [...series];\r\n  const out: TimeSeriesPoint[] = [];\r\n  const buffer: number[] = [];\r\n  for (const point of series) {\r\n    buffer.push(point.value);\r\n    if (buffer.length > window) buffer.shift();\r\n    const avg = buffer.length === window ? mean(buffer) : NaN;\r\n    out.push({ ...point, value: avg });\r\n  }\r\n  return out;\r\n}\r\n\r\nexport interface RegressionResult {\r\n  slope: number;\r\n  intercept: number;\r\n  r: number; // correlation coefficient\r\n}\r\n\r\n/**\r\n * Ordinary least squares linear regression on a time-series where x = incrementing index.\r\n * Returns slope, intercept, and r (Pearson corr). Ignores NaN values.\r\n */\r\nexport function linearRegression(series: TimeSeriesPoint[]): RegressionResult {\r\n  const xs: number[] = [];\r\n  const ys: number[] = [];\r\n  for (let i = 0; i < series.length; i++) {\r\n    const v = series[i].value;\r\n    if (!Number.isNaN(v)) {\r\n      xs.push(i);\r\n      ys.push(v);\r\n    }\r\n  }\r\n  if (xs.length < 2) return { slope: 0, intercept: ys[0] ?? 0, r: 0 };\r\n  const mx = mean(xs);\r\n  const my = mean(ys);\r\n  let num = 0;\r\n  let den = 0;\r\n  for (let i = 0; i < xs.length; i++) {\r\n    num += (xs[i] - mx) * (ys[i] - my);\r\n    den += (xs[i] - mx) ** 2;\r\n  }\r\n  const slope = den === 0 ? 0 : num / den;\r\n  const intercept = my - slope * mx;\r\n  // compute r using existing pearson formula\r\n  const r = pearsonR(\r\n    xs.map((x, idx) => ({ date: String(x), value: x } as TimeSeriesPoint)),\r\n    ys.map((y, idx) => ({ date: String(idx), value: y } as TimeSeriesPoint))\r\n  );\r\n  return { slope, intercept, r };\r\n} ","import { TimeSeriesPoint } from '../types.js';\r\nimport { mean, std } from './stats.js';\r\n\r\nexport type RollingStat = 'mean' | 'min' | 'max' | 'std';\r\n\r\n/**\r\n * Generic rolling window helper – returns a new series with the statistic applied.\r\n * For indexes that don't have enough preceding values, `value` is NaN.\r\n */\r\nexport function rollingStatistic(\r\n  series: TimeSeriesPoint[],\r\n  window: number,\r\n  stat: RollingStat\r\n): TimeSeriesPoint[] {\r\n  if (window <= 1) return [...series];\r\n  const out: TimeSeriesPoint[] = [];\r\n  const buffer: number[] = [];\r\n  for (const point of series) {\r\n    buffer.push(point.value);\r\n    if (buffer.length > window) buffer.shift();\r\n    let val = NaN;\r\n    if (buffer.length === window) {\r\n      switch (stat) {\r\n        case 'mean':\r\n          val = mean(buffer);\r\n          break;\r\n        case 'min':\r\n          val = Math.min(...buffer);\r\n          break;\r\n        case 'max':\r\n          val = Math.max(...buffer);\r\n          break;\r\n        case 'std':\r\n          val = std(buffer);\r\n          break;\r\n      }\r\n    }\r\n    out.push({ ...point, value: val });\r\n  }\r\n  return out;\r\n}\r\n\r\nexport interface Anomaly {\r\n  point: TimeSeriesPoint;\r\n  zScore: number;\r\n}\r\n\r\n/**\r\n * Simple z-score based anomaly detection over a rolling window.\r\n * Flags a point as anomaly if |z| >= threshold.\r\n */\r\nexport function rollingZScoreAnomalies(\r\n  series: TimeSeriesPoint[],\r\n  window: number,\r\n  threshold = 3\r\n): Anomaly[] {\r\n  if (window < 2) return [];\r\n  const anomalies: Anomaly[] = [];\r\n  const buffer: number[] = [];\r\n  for (let i = 0; i < series.length; i++) {\r\n    const v = series[i].value;\r\n    buffer.push(v);\r\n    if (buffer.length > window) buffer.shift();\r\n    if (buffer.length < window) continue; // not enough history\r\n\r\n    const m = mean(buffer);\r\n    const s = std(buffer);\r\n    if (s === 0) continue;\r\n    const z = (v - m) / s;\r\n    if (Math.abs(z) >= threshold) {\r\n      anomalies.push({ point: series[i], zScore: z });\r\n    }\r\n  }\r\n  return anomalies;\r\n} ","import type { TimeSeriesPoint } from '../types.js';\r\nimport type { ChartOptions } from '../charts/svg.js';\r\n\r\ndeclare const Worker: any;\r\ndeclare const Blob: any;\r\ndeclare const URL: any;\r\n\r\n/**\r\n * Spawn a Web Worker that contains an isolated copy of the tiny SVG chart renderers.\r\n * The main thread sends { kind:\"line\"|\"bar\", series, opts } and receives { svg }.\r\n * If the environment has no Worker support (e.g., Node.js), falls back to synchronous render.\r\n */\r\nfunction createChartWorker(): Worker | null {\r\n  // Guard for environments without Worker (Node, older browsers)\r\n  if (typeof Worker === 'undefined') return null as any;\r\n\r\n  const workerSrc = `\r\n    self.addEventListener('message', (ev) => {\r\n      const { kind, series, opts } = ev.data;\r\n\r\n      function lineChartSVG(series, opts = {}) {\r\n        const DEFAULT = { width: 320, height: 180, stroke: '#007aff', fill: 'none' };\r\n        const { width, height, stroke } = Object.assign({}, DEFAULT, opts);\r\n        const data = series.filter(p => Number.isFinite(p.value));\r\n        if (!data.length) {\r\n          self.postMessage({ svg: '<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>' });\r\n          return;\r\n        }\r\n        const minVal = Math.min.apply(null, data.map(d => d.value));\r\n        const maxVal = Math.max.apply(null, data.map(d => d.value));\r\n        const yScale = v => maxVal === minVal ? height/2 : height - ((v - minVal)/(maxVal - minVal))*(height-20)-10;\r\n        const xScale = i => (i/(data.length-1))*(width-20)+10;\r\n        var path='';\r\n        data.forEach(function(d,i){ var x=xScale(i); var y=yScale(d.value); path += (i===0?'M':' L')+x+','+y; });\r\n        var svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"'+width+'\" height=\"'+height+'\" viewBox=\"0 0 '+width+' '+height+'\"><path d=\"'+path+'\" fill=\"none\" stroke=\"'+stroke+'\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>';\r\n        self.postMessage({ svg: svg });\r\n      }\r\n\r\n      function barChartSVG(series, opts = {}) {\r\n        const DEFAULT = { width: 320, height: 180, stroke: '#007aff', fill: '#007aff' };\r\n        const { width, height, fill } = Object.assign({}, DEFAULT, opts);\r\n        const data = series.filter(p => Number.isFinite(p.value));\r\n        if (!data.length) {\r\n          self.postMessage({ svg: '<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>' });\r\n          return;\r\n        }\r\n        const barWidth = Math.max(2, Math.floor((width-20)/data.length));\r\n        const maxVal = Math.max.apply(null, data.map(d => d.value));\r\n        const yScale = v => maxVal===0?0:(v/maxVal)*(height-20);\r\n        var rects='';\r\n        data.forEach(function(d,i){ var x=10+i*barWidth+2; var barH=yScale(d.value); var y=height-barH-10; rects += '<rect x=\"'+x+'\" y=\"'+y+'\" width=\"'+(barWidth-4)+'\" height=\"'+barH+'\" fill=\"'+fill+'\" />'; });\r\n        var svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"'+width+'\" height=\"'+height+'\" viewBox=\"0 0 '+width+' '+height+'\">'+rects+'</svg>';\r\n        self.postMessage({ svg: svg });\r\n      }\r\n\r\n      if (kind === 'line') lineChartSVG(series, opts);\r\n      else barChartSVG(series, opts);\r\n    });\r\n  `;\r\n\r\n  const blob = new Blob([workerSrc], { type: 'application/javascript' });\r\n  const url = URL.createObjectURL(blob);\r\n  return new Worker(url);\r\n}\r\n\r\nasync function runInWorker(kind: 'line' | 'bar', series: TimeSeriesPoint[], opts: ChartOptions = {}): Promise<string> {\r\n  const worker = createChartWorker();\r\n  if (!worker) {\r\n    // Fallback to synchronous execution (import inline functions)\r\n    if (kind === 'line') {\r\n      // dynamic import to avoid circular\r\n      const { lineChartSVG } = await import('../charts/svg.js');\r\n      return lineChartSVG(series, opts);\r\n    }\r\n    const { barChartSVG } = await import('../charts/svg.js');\r\n    return barChartSVG(series, opts);\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    const timer = setTimeout(() => {\r\n      worker.terminate();\r\n      reject(new Error('Chart worker timeout'));\r\n    }, 10_000);\r\n\r\n    worker.onmessage = (ev) => {\r\n      clearTimeout(timer);\r\n      worker.terminate();\r\n      resolve(ev.data.svg as string);\r\n    };\r\n    worker.onerror = (err) => {\r\n      clearTimeout(timer);\r\n      worker.terminate();\r\n      reject(err);\r\n    };\r\n    worker.postMessage({ kind, series, opts });\r\n  });\r\n}\r\n\r\nexport function renderLineChartSecure(series: TimeSeriesPoint[], opts: ChartOptions = {}): Promise<string> {\r\n  return runInWorker('line', series, opts);\r\n}\r\n\r\nexport function renderBarChartSecure(series: TimeSeriesPoint[], opts: ChartOptions = {}): Promise<string> {\r\n  return runInWorker('bar', series, opts);\r\n} ","import React, { useEffect, useState } from 'react';\r\nimport type { TimeSeriesPoint } from '../types.js';\r\nimport type { ChartOptions } from '../charts/svg.js';\r\nimport { renderLineChartSecure } from '../secure/renderWorker.js';\r\n\r\nexport interface LineChartProps {\r\n  series: TimeSeriesPoint[];\r\n  options?: ChartOptions;\r\n  className?: string;\r\n}\r\n\r\nexport const LineChart: React.FC<LineChartProps> = ({ series, options = {}, className }: LineChartProps) => {\r\n  const [svg, setSvg] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    renderLineChartSecure(series, options).then((out) => {\r\n      if (!cancelled) setSvg(out);\r\n    });\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, [series, JSON.stringify(options)]);\r\n\r\n  return <div className={className} dangerouslySetInnerHTML={{ __html: svg }} />;\r\n}; ","import React, { useEffect, useState } from 'react';\r\nimport type { TimeSeriesPoint } from '../types.js';\r\nimport type { ChartOptions } from '../charts/svg.js';\r\nimport { renderBarChartSecure } from '../secure/renderWorker.js';\r\n\r\nexport interface BarChartProps {\r\n  series: TimeSeriesPoint[];\r\n  options?: ChartOptions;\r\n  className?: string;\r\n}\r\n\r\nexport const BarChart: React.FC<BarChartProps> = ({ series, options = {}, className }: BarChartProps) => {\r\n  const [svg, setSvg] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    renderBarChartSecure(series, options).then((out) => {\r\n      if (!cancelled) setSvg(out);\r\n    });\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, [series, JSON.stringify(options)]);\r\n\r\n  return <div className={className} dangerouslySetInnerHTML={{ __html: svg }} />;\r\n}; "],"mappings":"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","names":["path","path","import_promises","path","Ajv","path","lineChartSVG","barChartSVG","import_react","import_jsx_runtime"]}